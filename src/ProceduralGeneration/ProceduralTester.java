package ProceduralGeneration;

/**
 * 
 * Intended as a base for any way of visually modifying/testing/editing 
 * data that was generated by your procedural algorithm.
 * 
 * A ProceduralTester is passed into a ProceduralMapViewer as a second
 * parameter along with the ProceduralMapGenerator. 
 * 
 * Use the ProceduralTester to manipulate the visualized data that is
 * shown by the ProceduralMapViewer, then call the methods from the
 * ProceduralTester in your ProceduralMapViewer that extends the
 * abstract class.
 * 
 * Note that when executing any action in the ProceduralMapViewer that
 * changes the values of the ProceduralMap, you also need to re-create or
 * update the map in the ProceduralTester. This can be done by changing
 * the actionListeners assigned to the generate, step, and run buttons
 * as well as any other map-modifying buttons that you added in your
 * ProceduralMapViewer.
 * 
 * @author Chandler
 *
 */
public abstract class ProceduralTester<T> {

	protected ProceduralMap<T> map;
	
	public ProceduralTester(ProceduralMap<T> map){
		this.map = map;
	}
	
}
